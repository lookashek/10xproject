/**
 * Shared types for backend and frontend
 * 
 * This file contains DTOs (Data Transfer Objects) and Command Models
 * that represent data structures used by the API endpoints.
 * All types are derived from database models to ensure type safety.
 */

import type { Tables, TablesInsert, TablesUpdate } from './db/database.types';

// ============================================================================
// ENTITY TYPES (Database Models)
// ============================================================================

/**
 * Flashcard entity from database
 */
export type FlashcardEntity = Tables<'flashcards'>;

/**
 * Generation entity from database
 */
export type GenerationEntity = Tables<'generations'>;

/**
 * Generation error log entity from database
 */
export type GenerationErrorLogEntity = Tables<'generation_error_logs'>;

// ============================================================================
// LITERAL TYPES
// ============================================================================

/**
 * Valid flashcard source values
 * - 'ai-full': Generated by AI and accepted without modifications
 * - 'ai-edited': Generated by AI but edited before accepting
 * - 'manual': Created manually by user
 */
export type FlashcardSource = 'ai-full' | 'ai-edited' | 'manual';

// ============================================================================
// FLASHCARD DTOs
// ============================================================================

/**
 * Flashcard DTO returned by API endpoints
 * Excludes user_id for security (will be inferred from auth context)
 */
export type FlashcardDTO = Omit<FlashcardEntity, 'user_id'>;

/**
 * Single flashcard creation command
 * Used when creating a single flashcard (manual or from generation)
 */
export type FlashcardCreateCommand = {
  front: string;
  back: string;
  source: FlashcardSource;
  generation_id?: number | null;
};

/**
 * Batch flashcard creation command
 * Used when accepting multiple flashcards from AI generation
 */
export type FlashcardBatchCreateCommand = {
  flashcards: FlashcardCreateCommand[];
};

/**
 * Flashcard update command
 * Only front and back can be updated
 * Source will be automatically changed to 'ai-edited' if original was 'ai-full'
 */
export type FlashcardUpdateCommand = {
  front?: string;
  back?: string;
};

/**
 * Query parameters for listing flashcards
 */
export type FlashcardListQuery = {
  page?: number;
  limit?: number;
  source?: FlashcardSource;
  search?: string;
};

/**
 * Response for flashcard list endpoint
 */
export type FlashcardListResponse = PaginatedResponse<FlashcardDTO>;

// ============================================================================
// GENERATION DTOs
// ============================================================================

/**
 * Generation DTO returned by API endpoints
 * Excludes user_id for security (will be inferred from auth context)
 */
export type GenerationDTO = Omit<GenerationEntity, 'user_id'>;

/**
 * Proposed flashcard returned by AI generation
 * Does not have id, timestamps, or metadata yet
 */
export type ProposedFlashcard = {
  front: string;
  back: string;
  source: "ai-full";
};

/**
 * Generation creation command
 * Used when requesting AI to generate flashcards from source text
 */
export type GenerationCreateCommand = {
  source_text: string;
};

/**
 * Response after creating a generation
 * Includes generation metadata and proposed flashcards (not yet saved)
 */
export type GenerationCreateResponse = {
  generation: GenerationDTO;
  proposed_flashcards: ProposedFlashcard[];
};

/**
 * Generation details with associated flashcards
 * Used by GET /api/generations/{id} endpoint
 */
export type GenerationDetailDTO = GenerationDTO & {
  flashcards: Pick<FlashcardDTO, 'id' | 'front' | 'back' | 'source'>[];
};

/**
 * Query parameters for listing generations
 */
export type GenerationListQuery = {
  page?: number;
  limit?: number;
};

/**
 * Response for generation list endpoint
 */
export type GenerationListResponse = PaginatedResponse<GenerationDTO>;

// ============================================================================
// PAGINATION
// ============================================================================

/**
 * Pagination metadata
 */
export type PaginationMeta = {
  page: number;
  limit: number;
  total: number;
  total_pages: number;
};

/**
 * Generic paginated response
 */
export type PaginatedResponse<T> = {
  data: T[];
  pagination: PaginationMeta;
};

// ============================================================================
// ERROR HANDLING
// ============================================================================

/**
 * Error codes used across the API
 */
export type ApiErrorCode =
  | 'VALIDATION_ERROR'
  | 'NOT_FOUND'
  | 'CONFLICT'
  | 'UNAUTHORIZED'
  | 'FORBIDDEN'
  | 'RATE_LIMIT_EXCEEDED'
  | 'INTERNAL_SERVER_ERROR'
  | 'SERVICE_UNAVAILABLE'
  | 'UNPROCESSABLE_ENTITY';

/**
 * Error detail object with additional context
 */
export type ApiErrorDetail = {
  field?: string;
  constraint?: string;
  [key: string]: unknown;
};

/**
 * Standardized API error response
 */
export type ApiError = {
  error: {
    code: ApiErrorCode;
    message: string;
    details?: ApiErrorDetail;
  };
};

// ============================================================================
// DATABASE INSERT/UPDATE TYPES (for internal use)
// ============================================================================

/**
 * Internal type for inserting flashcard into database
 * Includes user_id which is added server-side from auth context
 */
export type FlashcardInsert = TablesInsert<'flashcards'>;

/**
 * Internal type for updating flashcard in database
 */
export type FlashcardUpdate = TablesUpdate<'flashcards'>;

/**
 * Internal type for inserting generation into database
 * Includes user_id which is added server-side from auth context
 */
export type GenerationInsert = TablesInsert<'generations'>;

/**
 * Internal type for updating generation in database
 */
export type GenerationUpdate = TablesUpdate<'generations'>;

/**
 * Internal type for logging generation errors
 */
export type GenerationErrorLogInsert = TablesInsert<'generation_error_logs'>;

// ============================================================================
// FLASHCARDS VIEW MODELS (Frontend specific types)
// ============================================================================

/**
 * Stan dialogu w FlashcardsView
 * Określa, który dialog jest otwarty i z jakimi danymi
 */
export type DialogState = 
  | { type: 'closed' }
  | { type: 'create' }
  | { type: 'edit'; flashcard: FlashcardDTO }
  | { type: 'delete'; flashcard: FlashcardDTO };

/**
 * Dane formularza fiszki
 * Używane przez FlashcardForm do walidacji i submitu
 */
export type FlashcardFormData = {
  front: string;
  back: string;
};

/**
 * Rozszerzony filtr źródła z opcją "all"
 * Używany w FlashcardToolbar
 */
export type SourceFilterValue = FlashcardSource | 'all';

/**
 * Props dla komponentów toast notifications
 */
export type ToastMessage = {
  type: 'success' | 'error' | 'info';
  title: string;
  description?: string;
};

/**
 * Stan ładowania dla różnych operacji
 */
export type LoadingState = {
  isLoading: boolean; // ładowanie listy
  isSaving: boolean;  // zapisywanie create/edit
  isDeleting: boolean; // usuwanie fiszki
};

/**
 * Stan błędu
 */
export type ErrorState = {
  message: string;
  code?: ApiErrorCode;
} | null;

// ============================================================================
// DASHBOARD VIEW MODELS (Frontend specific types)
// ============================================================================

/**
 * Agregowane statystyki dla dashboardu użytkownika
 */
export type DashboardStats = {
  /** Całkowita liczba fiszek użytkownika */
  totalFlashcards: number;
  
  /** Liczba wykonanych generacji AI */
  totalGenerations: number;
  
  /** Wskaźnik akceptacji fiszek AI w procentach (0-100) */
  acceptanceRate: number;
  
  /** Liczba fiszek oczekujących na naukę (dla MVP może być 0) */
  flashcardsDueForStudy: number;
};

/**
 * Propsy dla komponentu StatsCard
 */
export type StatsCardProps = {
  icon: React.ReactNode;
  value: number | string;
  label: string;
  variant?: 'default' | 'highlight';
};

/**
 * Propsy dla komponentu MenuTile
 */
export type MenuTileProps = {
  icon: React.ReactNode;
  title: string;
  description: string;
  href: string;
  variant?: 'default' | 'primary';
};

/**
 * Profil użytkownika dla wyświetlenia w UI
 */
export type UserProfile = {
  id: string;
  email: string;
  username?: string;
  avatar_url?: string;
};

/**
 * Odpowiedź z endpointu statystyk (jeśli zostanie stworzony)
 */
export type DashboardStatsResponse = {
  stats: DashboardStats;
};

