name: Deploy to Cloudflare Pages

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Production'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

jobs:
  # Job 1: Linting
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # Job 2: Testy jednostkowe
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # Job 3: Build
  build:
    name: Build for Cloudflare
    runs-on: ubuntu-latest
    needs: [test]
    env:
      CLOUDFLARE: "1"
      NODE_ENV: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job 4: Deploy do Cloudflare Pages
  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project for Cloudflare
        env:
          CLOUDFLARE: "1"
          NODE_ENV: production
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_KEY: ${{ secrets.PUBLIC_SUPABASE_KEY }}
        run: npm run build

      - name: Debug - Cloudflare Pages Configuration
        run: |
          echo "üìã Checking existing Cloudflare Pages projects..."
          curl -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq '.result[] | .name' || echo "No projects found or API error"
          echo ""
          echo "üîç Deployment configuration:"
          echo "Project Name :${{ secrets.CLOUDFLARE_PROJECT_NAME }}"

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
          branch: ${{ github.ref_name }}
          wranglerVersion: '3'

      - name: Deployment summary
        run: |
          echo "### üöÄ Deployment successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment ID:** ${{ steps.deploy.outputs.id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Aplikacja zosta≈Ça pomy≈õlnie wdro≈ºona na Cloudflare Pages!" >> $GITHUB_STEP_SUMMARY

  # Job 5: Quality Gate
  quality-gate:
    name: Quality Gate ‚úÖ
    runs-on: ubuntu-latest
    needs: [lint, test, build, deploy]
    if: always()
    steps:
      - name: Check all required jobs passed
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "‚ùå Linting failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "‚ùå Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Build failed"
            exit 1
          fi
          if [[ "${{ needs.deploy.result }}" != "success" ]]; then
            echo "‚ùå Deployment failed"
            exit 1
          fi
          echo "‚úÖ All quality checks passed and deployment completed!"

